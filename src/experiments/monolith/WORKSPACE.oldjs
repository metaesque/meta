# Documentationi for WORKSPACE
#  - https://bazel.build/reference/be/workspace
#     - bind : create aliases for targets (NOT recommended)
#     - local_repository: allows targets from a local directory to be bound
#     - new_local_repository: allows local directory to be turned into Bazel repo


# QUESTIONS:
#  - what bazel command do I invoke to verify an http_archive
#  - where are these files cached locally?

# NOTES:
#  - considering using a prelude file (tools/build_rules/prelude_bazel)
#    to avoid having to load nodejs_binary in every Javascript rule
#     - https://groups.google.com/g/bazel-discuss/c/sG5G5eMFYYA

workspace(
  name="meta_workspace",
  # Javascript: managed_directories has been deprecated
  # managed_directories = {"@npm": ["node_modules"]},
)

# Bazel infrastructure
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")

# skylib
#  - Rust depends on this, but we place it here in the general bazel
#    infrastructure section because other languages may find it useful too.
#  - installation instructions:
#      https://github.com/bazelbuild/bazel-skylib/releases

http_archive(
    name = "bazel_skylib",
    sha256 = "cd55a062e763b9349921f0f5db8c3933288dc8ba4f76dd9416aac68acee3cb94",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")
bazel_skylib_workspace()

#http_archive(
#    name = "bazel_skylib",
#    sha256 = "2c62d8cd4ab1e65c08647eb4afe38f51591f43f7f0885e7769832fa137633dcb",
#    strip_prefix = "bazel-skylib-0.7.0",
#    url = "https://github.com/bazelbuild/bazel-skylib/archive/0.7.0.tar.gz",
#)

#############
# C++
#############
# - Questions
#    - how do I specify g++ instead of clang?

# https://bazel.build/docs/cc-toolchain-config-reference
#   GCC
#    http_archive(
#        name = "aspect_gcc_toolchain",
#        sha256 = "3341394b1376fb96a87ac3ca01c582f7f18e7dc5e16e8cf40880a31dd7ac0e1e",
#        strip_prefix = "gcc-toolchain-0.4.2",
#        urls = [
#            "https://github.com/aspect-build/gcc-toolchain/archive/refs/tags/0.4.2.tar.gz",
#        ],
#    )
#
#    load("@aspect_gcc_toolchain//toolchain:repositories.bzl", "gcc_toolchain_dependencies")
#    gcc_toolchain_dependencies()
#    load("@aspect_gcc_toolchain//toolchain:defs.bzl", "gcc_register_toolchain", "ARCHS")
#    gcc_register_toolchain(
#        name = "gcc_toolchain_x86_64",
#        target_arch = ARCHS.x86_64,
#    )

# Unit Testing in C++
#  - https://google.github.io/googletest/quickstart-bazel.html
#  - https://google.github.io/googletest/primer.html
#  - TODO(wmh): How do I establish the sha256 value?
http_archive(
    name = "gtest",
    url = "https://github.com/google/googletest/archive/release-1.12.0.zip",
    #sha256 = "b58cb7547a28b2c718d1e38aee18a3659c9e3ff52440297e965f5edffe34b6d0",
    #build_file = "gtest.BUILD",
    strip_prefix = "googletest-release-1.12.0",
)

#############
# Javascript
#############
# - installation: https://github.com/aspect-build/rules_js
# - releases: https://github.com/aspect-build/rules_js/releases
# - docs: https://github.com/aspect-build/rules_js/tree/main/docs

# Using aspect_rules_js:
#  - The following code is (almost) verbatim from
#      https://github.com/aspect-build/rules_js/releases
#    in the 'Using WORKSPACE' section.
#  - To update javascript rules, revisit the above link and recopy the
#    text in this section.
#


# NOTE: Before aspect_rules_js existed, there was build_bazel_rules_nodejs,
# which is referenced in lots of documentation but is no longer being
# maintained. Do NOT use build_bazel_rules_nodejs, but one can see example
# usage in
#  - https://levelup.gitconnected.com/build-and-run-your-first-node-js-application-with-bazel-898e1a92fac5

# Load the rules_nodejs repository
http_archive(
    name = "build_bazel_rules_nodejs",
    sha256 = "d63ecec7192394f5cc4ad95a115f8a6c9de55c60d56c1f08da79c306355e4654",
    urls = ["https://github.com/bazelbuild/rules_nodejs/releases/download/4.6.1/rules_nodejs-4.6.1.tar.gz"],
)

# Load the node_repositories function
load("@build_bazel_rules_nodejs//:index.bzl", "node_repositories")

# This rule installs nodejs, npm, and yarn, but does NOT install
# your npm dependencies into your node_modules folder.
# You must still run the package manager to do this.
node_repositories(
    package_json = ["//:package.json"],
    node_version = "21.2.0", # Invoked 'node -version' on 2023-12-01
)

# The npm_install rule runs npm anytime the package.json or package-lock.json file changes.
# It also extracts any Bazel rules distributed in an npm package.
load("@build_bazel_rules_nodejs//:index.bzl", "npm_install")
npm_install(
    # Name this npm so that Bazel Label references look like @npmold//package
    name = "npm",
    # Paths to the package*.json files
    package_json = "//:package.json",
    package_lock_json = "//:package-lock.json",
)

#############
# Python
#############


##############
# Go
##############

# Go Rules
#   http_archive(
#       name = "io_bazel_rules_go",
#       url = "https://github.com/bazelbuild/rules_go/releases/download/0.18.3/rules_go-0.18.3.tar.gz",
#       sha256 = "86ae934bd4c43b99893fc64be9d9fc684b81461581df7ea8fc291c816f5ee8c5",
#   )
#
#   load("@io_bazel_rules_go//go:deps.bzl", "go_rules_dependencies", "go_register_toolchains")
#   go_rules_dependencies()
#   go_register_toolchains()

# Gazelle (creates Bazel rules from standard Go builds)
#   http_archive(
#       name = "bazel_gazelle",
#       urls = ["https://github.com/bazelbuild/bazel-gazelle/releases/download/0.17.0/bazel-gazelle-0.17.0.tar.gz"],
#       sha256 = "3c681998538231a2d24d0c07ed5a7658cb72bfb5fd4bf9911157c0e9ac6a2687",
#   )
#   load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
#   gazelle_dependencies()

# Go libraries
#   go_repository(
#       name = "io_rsc_quote",
#       importpath = "rsc.io/quote",
#       tag = "v1.5.2",
#   )
#
#   go_repository(
#       name = "io_rsc_sampler",
#       importpath = "rsc.io/sampler",
#       tag = "v1.3.0",
#   )
#
#   go_repository(
#       name = "org_golang_x_text",
#       commit = "14c0d48ead0c",
#       importpath = "golang.org/x/text",
#   )

###########
# Rust
###########

# Rust Rules
#   git_repository(
#       name = "io_bazel_rules_rust",
#       commit = "d28b121396974a628b9cdb29b6ed7f4e370edb4e",
#       remote = "https://github.com/bazelbuild/rules_rust",
#       shallow_since = "1557167838 -0400",
#   )
#
#   load("@io_bazel_rules_rust//rust:repositories.bzl", "rust_repositories")
#   rust_repositories()
#
#   load("@io_bazel_rules_rust//:workspace.bzl", "bazel_version")
#   bazel_version(name = "bazel_version")

# FFI for Rust
#   new_git_repository(
#       name = "libc",
#       build_file = "libc.BUILD",
#       remote = "https://github.com/rust-lang/libc",
#       commit = "6ec4f81a3852797410b80296d3afd61f2b255a36",
#       shallow_since = "1484672371 +0000"
#   )
