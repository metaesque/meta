namespace metax.story scope:

  abstract
  class StoryRootConstruct < metax.meta.Construct #:
    Abstract superclass of all Meta(Story) constructs.
  assocs:
    cls assoc metarotica2.constructs.Env;
  scope:

    field story : StoryConstruct #:
      Every construct caches the StoryConstruct it belongs to.
    scope:
      accessor get lazy:
        story = self.ancestor('story', proper=True)
        if story is None:
          raise Error('Failed to find story ancestor for %s' % self.fqn())
        -> story
    end field story;

    field logs : str #:
      Multiline text specifying <uid> <start> <end> triples of DayLog regions.

    method recordLogs #:
      Store logs construct value in logs field
    scope:
      logs_attr, logs = self.attrpair('logs:', default=None)
      if logs:
        logs_str = '\n'.join(logs).strip()
        /# print '%s has %d log entries' % (self.kindfqn(), len(logs))
      else:
        logs_str = None
      self.logsIs(logs_str)
    test:
    end method recordLogs;

    method addList : vec<str> #:
      Convert a string-valued comma-separated field to a list.

      Returns:
        null if field doesn't exist.
    params:
      var field : str;
      var output : map = null #:
        If present, add a key/value pair for the field and return value to this
        map.
      var key : str = null #:
        If specified, use this key instead of field when adding to output.
    scope:
      result = None
      value = self.attrval(field, default=None)
      if value is not None:
        if isinstance(value, metax.c.Expr):
          value = value.asStr(unquote=True)
        result = re.split(metarotica2.constructs.Env.COMMA_RE, value.strip())
        if output is not None:
          output[key or field] = result
      return result
    test:
    end method addList;

    method addStr : str #:
      Convert a field to a string.
       - if the value is an Expr, convert to unquoted string
       - if the value is a SimpleBlock, convert to a newline-merged string
       - else keep the value as-is.
    params:
      var field : str;
      var output : map = null #:
        If present, add a key/value pair for the field and return value to this
        map.
      var key : str = null #:
        If specified, use this key instead of field when adding to output.
      var default : any = null #:
        What to assign if field not found. If null, nothing assigned.
      var strip : bool = false #:
        If true, strip whitespace from front and back of value before storing.
    scope:
      /# TODO(wmh): Support passing LOOKUP into default.
      value = self.attrval(field, default=None)
      if value is None and default is not None:
        value = default
      if value is not None:
        if isinstance(value, metax.c.Expr):
          value = value.asStr(unquote=True)
        elif isinstance(value, list):
          value = '\n'.join(value)
        if strip:
          value = value.strip()
        if output is not None:
          output[key or field] = value
      return value
    test:
    end method addStr;

    method addInt : int #:
      Convert a field to an int.
    params:
      var field : str;
      var output : map = null #:
        If present, add a key/value pair for the field and return value to this
        map.
      var key : str = null #:
        If specified, use this key instead of field when adding to output.
      var default : int = 0 #:
        What to assign if field not found. If null, nothing assigned.
    scope:
      value = self.attrval(field, default=None)
      if value is None:
        value = default
      value = int(value)
      if output is not None:
        output[key or field] = value
      return value
    test:
    end method addInt;

    method findPreviousSection : StoryRootConstruct #:
      Obtain the nearest previous SectionConstruct instance.
    scope:
      result = None
      parent = self.parent()
      block = parent.value()
      index = block.index(self)      
      while index > 0:
        index -= 1
        cons = block[index]
        if cons.kind() == 'section':
          result = cons
          break
      return result
    test:
    end method findPreviousSection;

    abstract
    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    end method modelFields;

  end class StoryRootConstruct;

  class StoryConstruct < StoryRootConstruct #:
    The story construct.
  assocs:
    std assoc datetime;
    cls usertest assoc wmh.date.Date;
    cls assoc wmh.table.Table;
  scope:
    field start : wmh.date.Date;

    field sections : @vec<SectionConstruct> #:
      The top-level sections in this story.

    field events : @map<str,EventConstruct> #:
      The collection of all events in the story.

    field evorder : vec<EventConstruct> #:
      The events in order of appearance. EventConstruct.index() is initialized
      relative to this list.

    field characters : @map<str,CharacterConstruct> #:
      Maps character cid's to Character, for all characters in the story.

    method kind : str scope:
      return 'story'

    method expandMeta scope:
      metafile = self.metafile()
      try:
        start_str = self.attrval('start')
        /# TODO(wmh): Support relative dates here?
        start_date = datetime.datetime.strptime(start_str, '%Y-%m-%d')
        self.startIs(wmh.date.Date(start_date))
      except ValueError:
        metafile.error('Invalid start "%s"' % start_str)
        self.startIs(None)

      owners = self.attrval('owners', default=None)
      if owners is None:
        metafile.error('Must provide at least one owner so story is accessible')

      evorder = []
      for child in self.attrval('scope:'):
        child.storyIs(self)
        if child.kind() == 'event':
          child.indexIs(len(evorder))
          evorder.append(child)
        child.expandMeta()
      self.evorderIs(evorder)
    end method expandMeta;

    method translateMeta : vec<BaseFile> scope:
      for child in self.attrval('scope:'):
        child.storyIs(self)
        child.translateMeta()
    end method translateMeta;

    method registerEvent params:
      var event : EventConstruct;
    scope:
      events = self.events()
      eid = event.id()
      if eid in events:
        self.metafile().error(
          'Found duplicate event %s' % eid, line=event.primary().line())
      else:
        events[eid] = event
    end method registerEvent;

    method registerCharacter params:
      var character : CharacterConstruct;
    scope:
      characters = self.characters()
      cid = character.id()
      if cid in characters:
        self.metafile().error(
          'Found duplicate character %s' % eid, line=character.primary().line())
      else:
        characters[cid] = character
    end method registerCharacter;

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    scope:
      result = {'start': self.start().rawdate()}
      self.addStr('title', output=result)
      self.addList('owners', output=result)
      self.addList('collaborators', output=result)
      self.addStr('comment:', output=result, key='comment')
      self.addStr('synopsis:', output=result, key='synopsis')
      self.addInt('mohs', output=result)
      return result
    end method modelFields;

    method tableOfContents #:
      Produce a table of contents for this story.
    params:
      var fp : ostream = out #:
        Where to write output.
      var indent : str = '';
      var ageof : str = null #:
        If present, add an 'age' column
    scope:

      def WhenStr(wdate, pdate):
        wtuple = (
          wdate.year, wdate.month, wdate.day,
          wdate.hour, wdate.minute,
          wdate.strftime('%a').lower())

        if not pdate:
          /# We do not have a previous date ... print full date
          tup = wtuple
        elif wdate < pdate:
          /# The current tuple is in the past relative to previous tuple,
          /# so print full date.
          tup = wtuple
        else:
          ptuple = (
            pdate.year, pdate.month, pdate.day,
            pdate.hour, pdate.minute,
            pdate.strftime('%a').lower())
          tup = []
          for i in range(0, 6):
            if wtuple[i] != ptuple[i]:
              tup += wtuple[i:]
              break
            else:
              tup.append(None)
         
        if tup[0]:
          result = '%04d-%02d-%02d %02d:%02d %3s' % tuple(tup)
        elif tup[1]:
          result = '     %02d-%02d %02d:%02d %3s' % tuple(tup[1:])
        elif tup[2]:
          result = '        %02d %02d:%02d %3s' % tuple(tup[2:])
        elif tup[3]:
          result = '           %02d:%02d %3s' % tuple(tup[3:])
        elif tup[4]:
          result = '              %02d %3s' % tuple(tup[4:])
        elif tup[5]:
          result = '                 %3s' % tup[5]
        else:
          result = ''

        if False:
          print '-' * 40
          print wtuple
          print ptuple
          print tup
          print result

        return result.replace(':00', ':  ')

      charas = self.characters()
      chara = charas.get(ageof, None)
      header = [
        {'name': 'num', 'align': 'right'},
        {'name': 'part'},
        {'name': 'chid', 'label': 'chid'},
        {'name': 'eid', 'label': 'eid'},
        {'name': 'when'},
        {'name': 'where'},
        {'name': 'what'},
        {'name': 'who'},
      ]
      if chara:
        header.append({'name': 'age'})
      table = wmh.table.Table(header)
      chapters = self.sections()
      enum = 0
      prev_part = ''
      prev_when_dt = None
      for chapter in chapters:
        /# Each chapter is a SectionConstruct.
        seckind = chapter.attrval('kind', default=None)
        if seckind:
          seckind = seckind.replace('\"', '')
        part = chapter.id() if seckind == 'part' else None
        events = chapter.children()
        first = True
        for event in events:
          enum += 1
          who = event.who()
          when_dt = event.date().rawdate()
          when_str = WhenStr(when_dt, prev_when_dt)
          when = event.date().rawdate().strftime('%a %Y-%m-%d %H:%M:%S')
          when = re.sub(':00$', '', when)
          row = {
            'num': enum,
            'eid': event.id(),
            'when': when_str,
            'where': event.where(),
            'what': event.what(),
            'who': ','.join(who),
          }
          if chara:
            print '%s = %s' % (chara.name(), event.date() - chara.dob())
          if first:
            row['chid'] = chapter.id()
          if part and part != prev_part:
            row['part'] = part
          if part:
            prev_part = part
          table.addRow(row)
          first = False
          prev_when_dt = when_dt
      table.write(fp=fp, indent=indent)
    test:
    end method tableOfContents;

    method showCast #:
      Produce a table of the cast of this story.
    params:
      var fp : ostream = out #:
        Where to write output.
      var indent : str = '';
    scope:
      table = wmh.table.Table([
        {'name': 'num', 'align': 'right'},
        {'name': 'cid', 'label': 'cid'},
        {'name': 'name'},
        {'name': 'alias'},
        {'name': 'dob', 'label': 'DOB'},
        {'name': 'age', 'align': 'right'},
      ])
      
      start = self.start()
      charas = self.characters()
      for i, name in enumerate(sorted(charas), start=1):
        chara = charas[name]
        age = chara.age()
        if not age:
          age = '*' + (start - chara.dob()).formatted()
        row = {
          'num': i,
          'cid': chara.id(),
          'name': chara.name(),
          'alias': chara.alias(),
          'dob': chara.dob(),
          'age': age,
        }
        table.addRow(row)
      table.write(fp=fp, indent=indent)
    test:
    end method showCast;

  end class;

  class CharacterConstruct < StoryRootConstruct #:
    The character construct.
  assocs:
    std assoc json;
    cls assoc wmh.date.Date;
  scope:

    field story : StoryConstruct;
    field dob : wmh.date.Date;
    field age : str #:
      This is maintained explicitly because the wmh.date code (or the
      underlying dateutil.relativedelta class) has a bug in which converting
      start-age to dob then using start-dob to get age2 does not produce the
      same date (usually off by one day, sometimes off by 2 days).

    method kind : str scope:
      return 'character'

    method name : str #:
      The name of this character.
    scope:
      name_expr = self.attrval('name', default=None)
      name = name_expr.asStr(unquote=True) if name_expr else '?'
      return name
    end method name;

    method alias : str #:
      The alias of this character.
    scope:
      alias_expr = self.attrval('alias', default=None)
      alias = alias_expr.asStr(unquote=True) if alias_expr else ''
      return alias
    end method alias;

    method expandMeta scope:
      /# By registering in expandMeta and processing in translateMeta, we
      /# avoid having to have constructs lexically appear before they are
      /# referenced
      self.story().registerCharacter(self)
    end;

    method translateMeta scope:
      metafile = self.metafile()
      story = self.story()
      start = story.start()

      /# age_str should be a full <ymd> if present
      age_str = self.attrval('age', default=None)
      /# dob_str should be a YYYY-mm-dd if present
      dob_str = self.attrval('dob', default=None)

      dob = None
      if age_str:
        self.ageIs(age_str)
        dob = start.minusYMD(age_str)
        if dob is None:
          metafile.error(
            'Failed to establish dob from "%s"' % age_str,
            line=self.primary().line())
      else:
        /# There is no age, so there must be an explicit dob.
        if dob_str is None:
          metafile.error(
            'Must provide either age or dob', line=self.primary().line())
        else:
          dob = wmh.date.Date.FromStr('-' + dob_str, basedate=start)
          if dob is None:
            metafile.error(
              'Invalid dob "%s"' % dob_str, line=self.primary().line())
      self.dobIs(dob)

      /# Process the logs.
      self.recordLogs()
      
    end method translateMeta;

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    scope:
      result = self.allpairs(
        stripcolon=True, simpletext=True,
        ignore=['character', 'config:', 'synopsis:', 'dob', 'images:'])
      self.addStr('synopsis:', output=result, key='synopsis', strip=True)
      result['rawdob'] = self.dob().rawdate()
      /# NOTE: Caller is responsible for setting sids
      result['sids'] = None

      images = self.attrval('images:', None)
      if images is not None:
        imglist = []
        for image in images:
          fields = image.modelFields()
          imglist.append(fields)
        result['images'] = json.dumps(imglist)

      return result
    end method modelFields;

  end class CharacterConstruct;

  class EventConstruct < StoryRootConstruct #:
    The event construct.
  assocs:
    std assoc re;
    cls assoc wmh.date.Date;
  scope:
    field when : str #:
      The ymd (relative to first cid in who).

    field date : wmh.date.Date #:
      When the event occurs

    field who : vec<str> #:
      A list of character baseids that participate.

    field where : str #:
      Where the event occurs

    field what : str #:
      Summary of what happens.

    field index : int #:
      The index of this Event within its parent story. Initialized in
      StoryConstruct.expandMeta()

    field tags : vec<str> #:
      The list of tags for this event.

    field section : SectionConstruct #:
      Which section this event belongs to.

    method kind : str scope:
      return 'event'

    method expandMeta scope:
      /# By registering in expandMeta and processing in translateMeta, we
      /# avoid having to have constructs lexically appear before they are
      /# referenced
      self.story().registerEvent(self)
      section = self.findPreviousSection()
      if section is None:
        self.metafile().error(
          'Failed to find a section construct before this event',
          line=self.primary().line())
      else:
        /# print '%s = %s' % (self.kindfqn(), section.kindfqn())
        self.sectionIs(section)
        section.children().append(self)
    end;

    method translateMeta scope:
      story = self.story()
      metafile = self.metafile()
      oneday = wmh.date.Date.ONEDAY

      primary = self.primary()
      day = self.attrval('day', default=None)
      when_attr, when = self.attrpair('when', default=None)
      what_attr, what = self.attrpair('what', default=None)
      where_attr, where = self.attrpair('where', default=None)
      who_attr, who = self.attrpair('who', default=None)
      tags_attr, tags = self.attrpair('tags', default=None)

      /# Parse the comma-separated list of tags.
      taglist = None
      if tags:
        taglist = re.split(
          metarotica2.constructs.Env.COMMA_RE, tags.asStr(unquote=True).strip())

      /# Process the 'what' string, which may specify some characters
      /# partiicpating (via $name syntax).  If they exist, they go first
      /# in the who list (which is important because the 'when' attribute
      /# is relative to the first character in the who list).
      if not what:
        metafile.error('missing required what attribute', line=primary.line())
        who_list = []
        what_str = None
      else:
        what_str = what.value().strip("\"")
        who_list = re.split(r'\$([a-zA-Z0-9_]+)', what_str)[1::2]

      /# Parse the comma-separated list of explicit participants, adding
      /# them to the end of the who_list obtained from implicit reference
      /# detection in 'what'.
      if who:
        who_str = who.value().strip("\"").strip()
        for cname in re.split(metarotica2.constructs.Env.COMMA_RE, who_str):
          if cname not in who_list:
            who_list.append(cname)

      /# Ensure that every chara id referenced in who_list is defined before
      /# this event.
      charas = story.characters()
      for cid in who_list:
        chara = charas.get(cid)
        if not chara:
          metafile.error(
            'Character id "%s" not found' % cid, line=primary.line())

      /# Establish the date on which the event occurs, based on the YMD
      /# in 'when' and the dob of the first participant.
      when_date = None
      if not when:
        /# We assume this event occurs on the same date as the previous event.
        /# TODO(wmh): Should we require a 'when' attribute? Assuming same day
        /# as previous doesn't help us establish the actual time of the event,
        /# which is useful to know.
        parent = self.parent()
        block = parent.value()
        index = block.index(self)
        if index > 0 and block[index-1].kind() == 'event':
          previous = block[index-1]
          when = previous.when()
          when_date = previous.date()
          metafile.info(
            'Assuming %s occurs on %s (same date as %s)' % 
            (self.id(), when, previous.id()))
        else:
          metafile.error('missing required when attribute', line=primary.line())
      else:
        /# The 'when' field is one of the following:
        /#  - an explicit date in one of the formats recognized by 
        /#    wmh.date.Date.FromStr()
        /#  - a delta relative to the previous event, of the form '+'<ymd>
        /#     - the day portion of <ymd> can be specified as '?d' to implicitly
        /#       compute the day based on the 'day' feature attribute (which
        /#       must be provided).
        /#     - the implicit date will also be within the next 6 days using
        /#       this approach
        /#  - a delta relative to the first person in the event's wholist, of
        /#    the form '='<ymd>

        /# print '%s = %s (%s)' % (self.id(), when, day)

        /# Establish the date that relative YMDs are based on.
        index = self.index()
        if index == 0:
          basedate = story.start()
          previous_event = None
        else:
          previous_event = self.parentConstruct().evorder()[index-1]
          basedate = previous_event.date()

        /# If we have a relative YMD with '?d', replace '?' with proper num.
        if '?d' in when:
          if day == 'any':
            metafile.fatal(
              'Cannot implicitly determine ?d in "%s" with day "%s"' %
              (when, day), line=when_attr.line())
          else:
            when = self._fixImplicitDay(when, day, basedate) 

        /# Obtain the date of the event from 'when' and basedate.
        when_date = wmh.date.Date.FromStr(when, basedate=basedate)
        if when_date is None:
          /# If 'when' is a <ymd>, we obtain the first character in who_list
          /# and find the date when that character is age <ymd>.
          if who_list:
            chara = charas.get(who_list[0], None)
            if chara is None:
              print '**** HERE with %s (%s)' % (who_list[0], self.kindfqn())
              when_date = None
            else:
              when_date = chara.dob().plusYMD(when)

          if not when_date:
            metafile.error(
              'Failed to establish date for when "%s"' % when,
              line=primary.line())

        if False:
          print (
            'HERE with %-30s index=%2d event=%-20s basedate=%s when=%s date=%s' %
            (self.kindfqn(), index, 
            previous_event.id() if previous_event else '',
            basedate, when, when_date))

        if when_date and day and day != 'any' and when_date.daystr() != day:
          fixed = '?' # self._fixYMD(when, when_date, day)  
          metafile.warning(
            'expecting day to be %s not %s (%s): %s' %
            (day, when_date.daystr(), when_date, when),
            line=self.primary().line())

      /# Establish where the event is occurring.
      if where:
        where_str = where.value().strip("\"")
      else:
        where_str = None

      if False:
        print self.kindfqn()
        print '  who: %s' % str(who_list)
        print '  what: %s' % what_str
        print '  when: %s (%s)' % (when, when_date)
        print '  where: %s' % where_str
        print '  logs: %s' % logs_str
        print '  tags: %s' % taglist

      self.whoIs(who_list)
      self.whatIs(what_str)
      self.whenIs(when)
      self.dateIs(when_date)
      self.whereIs(where_str)
      self.tagsIs(taglist)
      /# Process the logs.
      self.recordLogs()

    method _fixYMD : tuple<str,str> #:
      Given a ymd, associated date, and target day, return back the ymd before
      and after date that matches target day.
    params:
      var ymd : str #:
        The ymd that date is based on
      var date : wmh.date.Date #:
        The date to compare against day.
      var day : str #:
        The desired day (adjust date until its day matches, both forward and back)
    scope:
      start = date.minusYMD(ymd)
      fdate, fnum = self._fixDay(date, day)
      bdate, bnum = self._fixDay(date, day, back=True)
      if abs(bnum) < fnum:
        delta = bdate - start
      else:
        delta = fdate - start
      return delta.formatted()
    test:
      test.parseStory('tst')
      /# Asking for tue relative to sun picks future date.
      test.iseq('23y4m19d', test.event._fixYMD('23y4m17d', test.date, 'tue'))
      /# Asking for thu relative to sun picks past date.
      test.iseq('23y4m14d', test.event._fixYMD('23y4m17d', test.date, 'thu'))
    end method _fixYMD;
    
    method _fixImplicitDay : str #:
      Replace '?d' in 'when' with '<num>d'.
    params:
      var when : str #:
        A when string containing '?d'
      var day : str #:
        A three-letter lower-case day ('mon', 'tue', ..., 'sun')
      var basedate : wmh.date.Date #:
        The previous date to work from.
    scope:
      _, num = self._fixDay(basedate, day)
      result = when.replace('?d', '%dd' % num)
      return result
    test:
      test.parseStory('tst')      
      test.iseq(
        '+2d@20', test.event._fixImplicitDay('+?d@20', 'tue', test.date))
    end method _fixImplicitDay;

    method _fixDay : tuple<date,num> #:
      Obtain the date relative to basedate that has day 'day'.
    params:
      var basedate : wmh.date.Date #:
        The date to work from.
      var day : str #:
        A three-letter lower-case day ('mon', 'tue', ..., 'sun')
      var back : bool = false #:
        If true, go back instead of forward.
    scope:
      oneday = wmh.date.Date.ONEDAY
      sign = -1 if back else 1
      target_day = wmh.date.Date.DAYMAP[day]
      dt = basedate
      num = 0
      while dt.weekDay() != target_day:
        dt += oneday * sign
        num += sign
      return (dt, num)
    test:
      test.parseStory('tst')
      event = test.event
      test.iseq(6, test.date.weekDay())
      fdate, fnum = event._fixDay(test.date, 'tue')
      bdate, bnum = event._fixDay(test.date, 'tue', back=True)
      test.iseq(2, fnum)
      test.iseq(-5, bnum)
    end method _fixDay;

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    params:
      var date : wmh.date.Date #:
        For use when the 'when' field of this Event is +ymd or -ymd.
      var cid_func : function #:
        A function accepting a story model id and character construct id that
        returns a character model id.
    scope:
      result = {}
      sid = self.story().id()
      result['sid'] = sid

      /# Handle the features field
      /#  - In order to be able to produce meta syntax that matches input meta,
      /#    we need to capture the 'day' (and any other feature) attributes in
      /#    the model.
      features = []
      day_attr, day = self.attrpair('day', default=None)
      if day:
        features.append(day)
      result['features'] = ' '.join(features)

      /# Now the secondary fields
      self.addList('tags', output=result)
      self.addStr('what', output=result)
      self.addStr('where', output=result)

      /# For the 'who' field, we perform some massage using cid_func.
      wholist = self.addList('who')
      if wholist:
        for i in range(0, len(wholist)):
          wholist[i] = cid_func(sid, wholist[i])

      /# Handle the 'when' field.
      whenstr = self.attrval('when', None)
      if whenstr:
        result['whenstr'] = whenstr
        when_date = self.date()
        if when_date is None:
          print 'WARNING: %s has no date' % self.id()
        else:
          result['when'] = when_date.rawdate()

        if False:
          /# Old code
          if whenstr[0] == '+':
            ymd = whenstr[1:]
            atidx = ymd.find('@')
            if atidx < 0:
              hms = None
            else:
              hms = ymd[atidx+1:]
              ymd = ymd[:atidx]

            ymd = self._fixImplicitDay(ymd, day, date)
            event_date = date.plusYMD(ymd)
            hms_re = re.compile(
              r'^(?P<hour>\d+)'
              r'(?:h|[:h](?P<minute>\d+)(?:m|[:m](?P<second>\d+))?)?$')
            if hms:
              m = hms_re.match(hms)
              if not m:
                raise Error('Invalid hms %s within %s' % (hms, whenstr))
              event_date = wmh.date.Date(
                event_date.rawdate().replace(
                  hour=int(m.group('hour')),
                  minute=int(m.group('minute') or 0),
                  second=int(m.group('second') or 0)))
            when = event_date.rawdate()
          elif whenstr[0] == '-':
            event_date = date.minusYMD(whenstr[1:])
            when = event_date.rawdate()
          elif '=' in whenstr:
            raise Error('Not yet supporting "%s"' % whenstr)
          else:
            when_date = wmh.date.Date.FromStr(whenstr)
            if when_date is None:
              print 'here with %s and %s' % (whenstr, self.date())
              when = None
            else:
              when = when_date.rawdate()
          result['when'] = when

      self.addStr('comment:', output=result, key='comment')
      self.addStr('check:', output=result, key='check')

      logs = self.logs()
      /# It is important to send back an empty value here so that when we are
      /# using the result to update Event instances during merging of
      /# local and cloud data, we detect situtions where the 'logs'
      /# attribute has been deleted.  We will need to do similar things for
      /# other attributes here and in other model classes.
      result['logs'] = logs or ''

      return result
    end method modelFields;

  end class EventConstruct;

  class ViewConstruct < StoryRootConstruct #:
    The view construct.
  scope:

    method kind : str scope:
      return 'view'

    method expandMeta scope:
      from_ = self.attrval('from', default=None)
      if from_ is None:
        /# TODO(wmh): Have view id map to 'from' attribute via replacer
        /# semantics, at which point we can remove this method.
        metafile = self.metafile()
        metafile.error(
          'Must provide a from attribute', line=self.primary().line())

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    params:
      var eid : str #:
        The event model id
      var cid_func : function #:
        A function accepting a story model id and character construct id that
        returns a character model id.
    scope:
      result = {}
      sid = self.story().id()
      result['sid'] = sid
      from_ = self.attrval('from', default=metax.c.REQUIRED)
      cid = cid_func(sid, from_)
      result['cid'] = cid
      result['eid'] = eid
      /# Caller must populate ids themselves.
      result['ids'] = None
      self.addStr('comment:', output=result, key='comment')
      return result
    end method modelFields;

  end class;

  class ThreadConstruct < StoryRootConstruct #:
    The thread construct.
  scope:

    method kind : str scope:
      return 'thread'

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    scope:
      result = {}
      return result
    end method modelFields;

  end class;

  class SectionConstruct < StoryRootConstruct #:
    The section construct.
  scope:

    field children : @vec<StoryRootConstruct> #:
      A collection of Event and/or Section instances.
      TODO(wmh): Not yet fully supporting Section instances ... need to allow
      arbitrary nesting of section/section/section/event.

    method kind : str scope:
      return 'section'

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    params:
      var child_function : function #:
        Accepts an EventConstruct or SectionConstruct and returns an associated
        model uid.
    scope:
      result = {}
      sid = self.story().id()
      result['sid'] = sid
      self.addStr('kind', output=result, default='chapter')
      self.addStr('title', output=result)
      self.addStr('comment:', output=result, key='comment')
      /# Must add 'logs' even when empty so that we can detect changes.
      self.addStr('logs:', key='logs', output=result, default='')

      ids = []
      for child in self.children():
        ids.append(child_function(child))
      result['ids'] = ids

      return result
    end method modelFields;

    method expandMeta scope:
      /# print 'SectionConstruct.expandMeta: here with %s' % self.kindfqn()

      parent_construct = self.parentConstruct()
      if parent_construct.kind() == 'story':
        /# This is a top-level section.
        parent_construct.sections().append(self)
        /# print 'FOUND %s' % self.kindfqn()
      else:
        /# TODO(wmh): Nested sections is syntactically a bit confusing when
        /# combined with Meta's experimental implicit-scope feature (wherein
        /# constructs do not need to be lexically placed within the scope of
        /# their parent, but are instead implicitly inserted during parsing).
        print 'WARNING: NOT YET HANDLING NESTED %s' % self.kindfqn()
    end method expandMeta;

    method translateMeta scope:
      /# print 'SectionConstruct.translateMeta: here with %s' % self.kindfqn()

      /# Process the logs.
      self.recordLogs()
    end method translateMeta;

  end class SectionConstruct;

  class ImageConstruct < StoryRootConstruct #:
    An image
  scope:

    method kind : str scope:
      return 'image'

    method translateMeta scope:
      metafile = self.metafile()
      /#story = self.story()
      print self.kindfqn()
    end method translateMeta;

    method modelFields : map #:
      Create a key/value map suitable for use in creating an instance of
      metarotica2.story.models.Foo, for subclass FooConstruct.
    scope:
      title = self.attrval('title', default=None)
      if title:
        title = title.asStr(unquote=True)
      scope = self.attrval('scope:', default=None) or []
      urls = []
      for line in scope:
        line = line.strip()
        if not line: continue
        words = line.split()
        url = words[0]
        if url.startswith('http'):
          urls.append(url)

      result = {
        'name': self.id(),
        'title': title,
        'urls': urls,
      }
      return result
    end method modelFields;

  end class ImageConstruct;

  class QuestionConstruct < StoryRootConstruct #:
    A question.
  scope:

    method kind : str scope:
      return 'question'

    method expandMeta scope:
      metafile = self.metafile()
      /#story = self.story()
      print 'Here with question %s' % self.fqn()
    end method expandMeta;

  end class QuestionConstruct;

end namespace metax.story;
