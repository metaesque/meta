namespace metax.io #:
  I/O in Meta.

  TODO(wmh): Decide whether metax.fs should be moved into metax.io.
scope:

  class Sink #:
    Experiment in wrapping fp/indent. This will be moved into metax.io.
  assocs:
    std usertest assoc io;
    std assoc os #:
      TODO(wmh): Does this need to use metax.fs???
    std assoc sys;
    std assoc textwrap;
  scope:

    static
    field Null : Sink #:
      An instance of Sink that writes to /dev/null.

    static
    field Out : Sink #:
      An instance of Sink that writes to stdout.

    static
    field Err : Sink #:
      An instance of Sink that writes to stderr.

    field fp : ostream #:
      Where to write.

    field prefixes : @vec<str> #:
      prefixes[-1] is the indentation that should be added to every line
      written.

    field lastc : char #:
      The last character written the last time anything was written to the
      stream. Will not be updated if someone writes to self.fp() directly.

    field pathmap : map #:
      Maps path prefixes to shorthand (usually an environment variable,
      including the '$ explicitly if appropriate).  Used by Sink.truncate()
      to shorten paths, etc.

    field withpost : vec<str> #:
      Should only be present when the following idiom is used:
        with sink.indent(pre='before', post='after'):
          sink.writeln('hello')
      which will yield the following output:
        before
          hello
        after
      The last entry in this list is removed each time __exit__ is
      invoked.

    lifecycle params:
      var fp -> fp = out;
      var indent : str = '' #:
        The top-level indentation.
    scope:
      self.prefixes().append(indent)
      /# Important to set this to newline so that first line printed uses same
      /# logic as all other lines.
      self.lastcIs('\n')
    clinit:
      cls.OutIs(Sink(fp=sys.stdout))
      cls.ErrIs(Sink(fp=sys.stderr))
      dfp = open(os.devnull, 'w')
      cls.NullIs(Sink(fp=dfp))
    setup:
      sink = metax.io.Sink(io.StringIO(), indent=u'..')
      test.sinkIs(sink)
    end;

    test field sink : wmh.google.hotels.Sink;

    meta
    method Str : Sink #:
      Create a Sink writing to a io.StringIO() instance.
    scope:
      fp = io.StringIO()
      return cls(fp=fp)
    test:
    end method Str;

    method clone : Sink #:
      Make a copy of myself
    scope:
      cls = self.__class__
      result = cls(fp=self.fp())
      result.prefixesIs(self.prefixes()[:])
      result.lastcIs(self.lastc())
      result.pathmapIs(self.pathmap())
      return result
    test:
      sink = test.sink()
      sink2 = sink.clone()
      test.iseq(sink.prefix(), sink2.prefix())
    end method clone;

    method prefix : str #:
      Returns current indentation prefix.
    scope:
      return self._prefixes[-1]
    test:
      test.iseq('..', test.sink().prefix())
    end method prefix;

    method indent : Sink #:
      Add more indentation to the current value.

      Returns:
        An instance of Sink. This allows us to use the idiom:
          with sink.indent('  '):
            ...
    params:
      var value : str = '  ' #:
        The additional indentation.

        TODO(wmh): Need to consider the pros and cons of providing a default
        value for the 'value' param.
         - pros: almost always, the value is '  '
         - cons:
            - can this lead to confusion between indent() and undent()?
            - if someone prefers a default of '   ' or '    ', they cannot
              have it (unless we provide a default indent field in Sink.
      var pre : str = null #:
        If present, a single line to write before indentation occurs.
      var post : str = null #:
        If present, a single line to write after indentation returns.
        Should only be used within 'with' clauses.
    scope:
      if pre is not None:
        self.writeln(pre)
      if post is not None:
        withpost = self.withpost()
        if withpost is None:
          withpost = []
          self.withpostIs(withpost)
        withpost.append(post)

      /# if we want to support newlines in indent, write() will need updating.
      assert '\n' not in value
      newdent = self.prefix() + value
      self.prefixes().append(newdent)
      /# return newdent
      return self
    test:
      sink = test.sink()
      sink.indent('__')
      test.iseq('..__', sink.prefix())
    end method indent;

    method undent : str #:
      Return to previous indentation.

      Returns the new indentation.
    scope:
      prefixes = self.prefixes()
      if len(prefixes) > 1:
        prefixes.pop()
      else:
        print('WARNING: Attempt to undent with no indent')
      return prefixes[-1]
    test:
      sink = test.sink()
      test.iseq('..  ', sink.indent('  ').dent())
      test.iseq('..', sink.undent())
      test.iseq('..', sink.undent())
    end method undent;

    method newline #:
      Write a newline.

      This differs from self.write('\n') in not inserting indentation
      (useful to avoid blank lines at the end of a line)
    scope:
      self.lastcIs('\n')
      self.fp().write('\n')
    test:
      sink = test.sink()
      sink.writeln('hello')
      sink.writeln('')
      sink.newline()
      sink.writeln('goodbye')
      test.iseqtext("""\
        >|..hello
        >|
        >|
        >|..goodbye
        >|""",
        sink.fp().getvalue())
    end method newline;

    method write : void #:
      Write text to the sink, honoring indent.
    params:
      var text : str #:
        The text to write.  All newlines are replaced with indentation.
      multi var args : vec<any> #:
        A collection of args to apply to the printf template specified by text.
      multi var kwds : map #:
        flush : bool
          If true, flush after writing.
    scope:
      fp = self.fp()
      prefix = self.prefix()

      /# Handle pre-indentation for the new text.
      /#  - if the previous write ended with a newline, we need to add
      /#    'prefix' before we write the text
      /#  - if the previous write did NOT end with a newline, we do NOT
      /#    add 'prefix' before writing text
      if self.lastc() == '\n':
        fp.write(prefix)

      /# Adjust the specified text slightly, according to prefix.
      if text:
        if args:
          text = text % args

        /# We need to insert the prefix at the beginning of each line in text
        lastc = text[-1]
        if lastc == '\n':
          /# We do not want to insert indentation after the last newline.
          try:
            newtext = text[:-1].replace('\n', '\n' + prefix) + '\n'
          except UnicodeDecodeError as e:
            print(
              '**** IN metax.io.Sink.write, found text (%s) and prefix (%s) producing %s (%s)' %
              (type(text), type(prefix), e, sys.version_info))
            newtext = text
        else:
          /# We can perform a simple replace
          newtext = text.replace('\n', '\n' + prefix)
      else:
        /# Text is empty, so we need only write a newline.
        newtext = ''
        lastc = prefix[-1] if prefix else ''
      self.lastcIs(lastc)
      fp.write(newtext)

      if kwds.get('flush', False):
        fp.flush()
    test:
      sink = test.sink()

      sink.write('hello.')
      test.iseq('.', sink.lastc())
      test.iseqtext('..hello.', sink.fp().getvalue())

      sink.write(' This is\na test ')
      test.iseq(' ', sink.lastc())
      test.iseqtext('..hello. This is\n..a test ', sink.fp().getvalue())

      sink.write('and now\nanother\n')
      test.iseq('\n', sink.lastc())
      test.iseqtext(
        '..hello. This is\n'
        '..a test and now\n'
        '..another\n',
        sink.fp().getvalue())

      sink.write('to verify newlines\n')
      test.iseq('\n', sink.lastc())
      test.iseqtext(
        '..hello. This is\n'
        '..a test and now\n'
        '..another\n'
        '..to verify newlines\n',
        sink.fp().getvalue())
    end method write;

    method writeln : any #:
      Write text to the sink, honoring indent.
    params:
      var text : str = '' #:
        The text to write.  All newlines are replaces with indentation.
      multi var args : vec<any> #:
        A collection of args to apply to the printf template specified by text.
    scope:
      if text:
        self.write(text, *args)
      if not text or text[-1] != '\n':
        fp = self.fp()
        self.newline()
    test:
      sink = test.sink()
      sink.writeln('hello')
      sink.write('goodbye')
      sink.writeln(' fun world')
      test.iseqtext("""\
        >|..hello
        >|..goodbye fun world
        >|""",
        sink.fp().getvalue())
    end method writeln;

    method truncln : any #:
      Write a line, truncating at given width.
    params:
      var line : str #:
        The line to write.
      var width : int = 80 #:
        Max number of characters to write (including indent).
      var delim : str = '$' #:
        How to delimit truncation.
    scope:
      prefix = self.prefix()
      assert '\n' not in line
      full_line = prefix + line
      if len(full_line) > width:
        full_line = full_line[:width - len(delim)] + delim
      fp = self.fp()
      fp.write(full_line)
      self.newline()
    test:
    end method truncln;

    method wrap : any #:
      Write one or more lines to the stream, wrapping text to ensure no line is
      longer than 'width'.
    params:
      var text : str #:
        Potentially multi-line text. Note that all whitespace is removed from
        the end of this text before splitting into wrapped lines.
      var width : int = 80 #:
        The maximum width of each output line. This takes into account the
        text added due to implicit indent.
      var extra : str = '' #:
        Additional indentation to add to all wrapped lines except the first one.
    scope:
      w = width - len(self.prefix())
      for line in textwrap.wrap(
        text.rstrip(), width=w, initial_indent='', subsequent_indent=extra
      ):
        self.writeln(line)
    test:
    end method wrap;

    method flush #:
      Flush the output stream.
    scope:
      self.fp().flush()
    test:
      sink = test.sink()
      sink.write('a test')
      sink.flush()
    end method flush;

    method append #:
      Write text to stream without adding indentation.
    params:
      var phrase : str #:
        Should NOT contain newlines except optionally at the end.
    scope:
      if phrase:
        self.fp().write(phrase)
        self.lastcIs(phrase[-1])
    test:
      sink = test.sink()
      sink.indent('..')
      sink.write('a test')
      sink.append(' and more\n')
      test.iseq('....a test and more\n', sink.fp().getvalue())
    end method append;

    method truncate : str #:
      Truncate a path by using a prefix from prefixes.

      NOTE: This is an experiment. May be moved elsewhere.
    params:
      var path : str #:
        The path to truncate.
      var paths : map = null #:
        The paths to search in addition to self.pathmap
    scope:
      result = path

      pathmap = {}
      if self.pathmap():
        pathmap.update(self.pathmap())
      if paths:
        pathmap.update(paths)

      for prefix in sorted(pathmap, reverse=True):
        if path.startswith(prefix):
          result = pathmap[prefix] + path[len(prefix):]
          break
      return result
    test:
      sink = test.sink()
      test.iseq('/a/b/c/d', sink.truncate('/a/b/c/d'))

      sink.pathmapIs({'/a/b': '$TEST', '/a/b/c': '$TEST2'})
      test.iseq('$TEST2/d', sink.truncate('/a/b/c/d'))
    end method truncate;

    method adjWidth : int #:
      Return a width reduced by current indent.
    params:
      var width : int = 0 #:
        The width to adjust. If not specified, terminal width is assumed.
    scope:
      if width <= 0:
        width = os.get_terminal_size().columns
      return width - len(self.prefix())
    test:
    end method adjWidth;

    method updatePaths #:
      Update the prefix/abbrev pathmap
    params:
      var pathmap : map #:
        The new prefix/abbrev pairs to add. Overwrites existing prefixes.
    scope:
      if self.pathmap() is None:
        self.pathmapIs({})
      existing = self.pathmap()
      existing.update(pathmap)
    test:
      sink = test.sink()
      test.iseq('/a/b/c/d', sink.truncate('/a/b/c/d'))

      sink.updatePaths({'/a/b': '$TEST'})
      test.iseq('$TEST/c/d', sink.truncate('/a/b/c/d'))
      sink.updatePaths({'/a/b': '$TEST', '/a/b/c': '$TEST2'})
      test.iseq('$TEST2/d', sink.truncate('/a/b/c/d'))
      sink.updatePaths({'/a/b/c': '$TEST3'})
      test.iseq('$TEST3/d', sink.truncate('/a/b/c/d'))
    end method updatePaths;

    method __enter__ : any #:
      Support the use of sink objects in 'with' clauses:
        with sink.indent('  '):
          ...
      Is equivalent to:
        sink.indent('  ')
        try:
          ...
        finally:
          sink.undent()
    scope:
      /# noop
      pass
    test:
      /# noop .. tested in __exit__
      pass
    end method __enter__;

    method __exit__ : any #:
      Support the use of sink objects in 'with' clauses:
        with sink.indent('  '):
          ...
    params:
      var type : class #:
        Some subclass of Exception
      var value : ^Exception #:
        Some instance of the class type defined by 'type'.
      var traceback : types.TracebackType #:
        A traceback object.
    scope:
      self.undent()
      withpost = self.withpost()
      if withpost:
        post = withpost.pop()
        sink.writeln(post)
        if not withpost:
          self.withpostIs(None)
    test:
      sink = test.sink()

      sink.writeln('hello')
      sink.indent('##')
      sink.writeln('a test')
      sink.undent()
      sink.writeln('goodbye')
      test.iseq('..hello\n..##a test\n..goodbye\n', sink.fp().getvalue())

      sink2 = metax.io.Sink(fp=test.fp())
      sink2.writeln('hello')
      with sink2.indent('  '):
        sink2.writeln('here')
        with sink2.indent('  '):
          sink2.writeln('and here')
        sink2.writeln('back')
      sink2.writeln('goodbye')
      test.iseq('hello\n  here\n    and here\n  back\ngoodbye\n', test.out())
    end method __exit__;

  end class Sink;

end namespace metax.io;
