namespace metax.root #:
  The top-level classes that Meta provides.
scope:

  meta
  class ObjectMetaRoot #:
    The root of the metaclass hierarchy in Meta.

    There are two ways we can handle the interaction between metaclasses
    in Meta and those in the baselang:
      1) The meta-level metaclass is-a baselang-provided metaclass
      2) The meta-level metaclass has-a baselang-provided metaclass
    See ../../README.md for details. Currently implementing variant #1.
  parent<py> ^type
  parent<js> ^Object
  parent<cc> void
  assocs<cc>:
    std assoc string;
    std assoc vector;
    std assoc map;
  scope:

    field metaname : @str #:
      The name of the class being represented by this metaclass.
      TODO(wmh): This field is not needed in python ... need a way to
      have 'specific' fields. But we do want to define metaname() to return
      the name as stored in the type metaclass.
      TODO(wmh): This should be a readonly field, so no setter or reffer.

    field metabases : @vec<class> #:
      The parent classes of the class.
      TODO(wmh): This field is not needed in python ... need a way to
      have 'specific' fields.  But we do want to define metabases() to return
      the bases as stored in the type metaclass.
      TODO(wmh): This should be a readonly field, so no setter or reffer.

    field metasymbols : @map #:
      The symbols available within the class.
      TODO(wmh): This field is not needed in python ... need a way to
      have 'specific' fields.  But we do want to define metasymbols() to return
      the symbols as stored in the type metaclass.
      TODO(wmh): This should be a readonly field, so no setter or reffer.

    lifecycle #:
      Every user-defined class has an auto-generated metaclass created for it,
      and that metaclass inherits (eventually) from this class.  The meta
      compiler implicitly inserts a params: block in meta class initializers
      (if users define a meta-level lifecycle construct, they should not
      specify params:, as that will be an error).

      This signature is currently motivated by the signature of metaclasses in
      Python. As additional baselangs are added to Meta, we may need to
      generalize this implicit signature. Note that Javascript and C++ do not
      have metaclasses, so we are not constrained by these baselangs). But when
      we add in support for Java, we will need to establish whether
      java.lang.Class can be subclassed (or whether metax.root.ObjectMeta will
      need to act as a wrapper around a java.lang.Class instance) and how that
      influences this signature.
    params:
      var name : &str #:
        The name of the class being created
      var bases : &#vec<class> #:
        The parent classes of the class (instances of metaclasses)
      var symbols : &#map #:
        The symbols available within the class.
    super<py> (name, bases, symbols)
    scope<py>:
    scope<js>:
      this.metanameIs(name);
      this.metabasesIs(bases);
      this.metasymbolsIs(symbols);
    scope<cc>:
      this->metanameIs(name);
      this->metabasesIs(bases);
      this->metasymbolsIs(symbols);
    end lifecycle;

  end class ObjectMetaRoot;

  pre
  native ##:
    TODO(wmh): Meta issue to fix. If this 'native' construct is defined without
    adding a comment (so that 'scope<py>' is the attribute after primary), an
    explicit id is required even though this is an auto-aassigned construct. The
    selector at the end of the attribute key is confusing the auto-assign logic.
  decl<py>:
    /# We define a global dict used for counting instances of classes.
    ClassCount = collections.defaultdict(int)

    /# Client code can invoke metax.root.ShowClassCount() in their code if
    /# they've compiled some code with --countinstances.
    def ShowClassCount():
      print('')
      print('Class Instance Counts:')
      for fqn in sorted(ClassCount, key=lambda k: ClassCount[k], reverse=True):
        print('%7d %s' % (ClassCount[fqn], fqn))

    /# We define a global dict used for counting method calls.
    /#  - keys are method fqns, values are lists of three numbers:
    /#      [count, mean, M2]
    /#    per the incremental algorithm discussed in
    /#      https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm
    /#  - The mean at any given time is val[1]
    /#  - The variance is val[2] / val[0]
    /#  - The sample variance is val[2] / (val[0] - 1)
    MethodCount = {}

    /# Client code can invoke metax.root.ShowMethodCount() in their code if
    /# they've compiled some code with --countinvocations
    import math
    import re
    def ShowMethodCount(threshus=2, ignorere=None):
      /# threshus : int
      /#   Do not print any method whose total microseconds is less than this.
      /# ignorere : str or re
      /#   If present, do not print any method whose fqn searches against this
      mc = MethodCount
      print('')
      print('Method Instance Counts/Times:')
      print(
        '  %-50s %7s %12s %12s %12s' %
        ('fqn (fully qualified method name)', 'count', '\u03BCs total', '\u03BCs mean', '\u03BCs stddev'))
      print(
        '  %-50s %7s %12s %12s %12s' %
        ('-' * 50, '-' * 7, '-' * 12, '-' * 12, '-' * 12))

      ignored = 0
      ignored_us = 0
      skipped = 0

      if ignorere and not isinstance(ignorere, re.Pattern):
        ignorere = re.compile(ignorere)

      for fqn in sorted(mc, key=lambda n: mc[n][0] * mc[n][1], reverse=True):
        if ignorere and not ignorere.search(fqn):
          skipped += 1
          continue

        n, mean_ns, M2 = mc[fqn]

        /# At least on my M1 macbook, time.time_ns() is only returning
        /# resolution to the microsecond, so we don't bother showing
        /# nanosecond level resolution.
        mean_us = int((mean_ns / 1000) + 0.5)
        total_us = n * mean_us

        if total_us <= threshus:
          ignored += 1
          ignored_us += total_us
          continue

        k = len(fqn)
        if k > 50:
          fqn = fqn[:49] + '$'
        variance = M2/n
        /# TODO(wmh): Is this the proper way to convert variance in ns^2 to
        /# stddev in microseconds?
        stddev_us = math.sqrt(variance)/1000
        print('  %-50s %7d %12d %12d %12.1f' % (fqn, n, total_us, mean_us, stddev_us))

      if skipped:
        print(
          'Skipped %d methods not matching %s' % (skipped, ignorere.pattern))
      if ignored:
        print(
          'Ignored %d methods whose total us was <= %d \u03BCs each, '
          '%d \u03BCs total' % (ignored, threshus, ignored_us))

    /# The metax.root.Timer class supports the following profiling idiom in
    /# user-defined methods:
    /#   namespace a.b scope:
    /#     class A scope:
    /#       method f : int scope:
    /#         ... do some stuff
    /#         with metax.root.Timer(__metafqn__, 'block1'):
    /#           ... some code to be timed.
    /#         ... untimed stuff
    /#         with metax.root.Timer(__metafqn__, 'block2'):
    /#           ... some more code to be timed.
    /#       end method f;
    /#     end class A;
    /#   end namespace a.b;
    /#
    /# A subsequent invocation of metax.root.ShowMethodCount() will print out
    /# profile details on 'a.b.A.f/block1' and 'a.b.A.f/block1' (times called,
    /# total time spent, average time spent, stddev, etc.)
    import time
    class Timer(object):
      def __init__(self, fqn, label):
        self._label = fqn + '/' + label
        self._ns = 0
        self._active = True  # MetaObject._CLI.countinstances
      def __enter__(self):
        if self._active:
          self._ns = time.time_ns()
      def __exit__(self,type, value, tb):
        if self._active:
          Object.Welford(self._label, time.time_ns() - self._ns)

    /# NaN: float
    /#   The not-a-number value.
    NaN = float('nan')

    /# Returns a unicode string from either bytes or unicode, in py2/py3.
    def SafeStr(val):
      if sys.version_info.major == 2:
        result = val if isinstance(val, unicode) else val.decode('utf8')
      else:
        result = val.decode('utf8') if isinstance(val, bytes) else val
      return result
  end;

  class Object #:
    Except in special circumstances, every class defined within Meta inherits
    from this class. Every base language provides a specialized implementation
    that defines functionality useful in implementing Meta-level semantics
    within that base language. Some of the methods defined here are present in
    all languages, some are only present in a subset of languages or in just one
    language.

    This class does NOT introduce any instance-level state (or meta-level state
    either), but does define a significant amount of instance-level and
    meta-level functionality available to every instance and subclass.

    Note that the metaparent of this class is always ObjectMetaRoot. Any
    class that inherits from Object will have a metaclass that inherits
    from ObjectMetaRoot.  Any user-defined meta class by default inherits
    from ObjectMetaRoot (semantics implemented in
    metax.oopl.ClassConstruct.metaClassInfo().

    Meta:suppress: JSC_UNKNOWN_EXPR_TYPE
  parent<py> ^object
  parent<js> ^Object
  parent<cc> void
  metaparent metax.root.ObjectMetaRoot
  assocs<py>:
    std assoc collections;
    std assoc logging;
  assocs<cc>:
    cls assoc metax.root.ObjectMetaRoot;
    std assoc iostream;
  scope:

    static
    field Config : map<@str,@str> #:
      Initialized when it is first invoked. Intentionally NOT a meta field of
      Object because that would produce one instance per subclass, when the
      object should be shared amongst all classes and objects.
    scope:
      accessor get
      lazy<py>:
        /# TODO(wmh): Get this working in bazel!  Need to add to assocs
        /# and define a BUILD target ... in oopl.tgz?
        import metastrap
        /# print('NOTE: Initializing metax.root.Config!')
        result = metastrap.Config()
        /# logging.info(
        /#   'metax.root.Object.Config: initialized to %s' % str(result))
        -> result
      lazy<cc>:
        /# TODO(wmh): Make this a unique_ptr.
        std::map<metax::strview,metax::strview>* result =
          new std::map<metax::strview,metax::strview>();
        std::cerr
          << "metax.root.ObjectMeta.Config() not yet implemented"
          << std::endl;
        -> result
      end accessor get;
    end field Config;

    static
    field CLI : any #:
      Stores an instance of metax.cli.Values, providing access to the set of
      flags and args dictated by the command line. Also provides access to
      the instantiated Command (via CLI()._command_()).
      - This is currently typed as 'any' because there will be a circularity
        induced if we type it as metax.cli.Values. Need to establish
        whether this will be implementable in C++.
      - Initialized via metax.root.MetaObject.Initialize(), which is
        invoked by 'metac'. However, we need a mechanism for initializing
        it in situations where this object is desired 'in the wild'
        without the compiler as intermediary.
      - TODO(wmh): Find a way to initialize this properly.

    static rwx
    field ResourceMap : @map<@str,@str> #:
      Maps fully qualified resource names to explicit paths. The
      Object.Resource() method looks in this map before performing its
      default logic. Initialized by Object.Init().

    static
    method Init #:
      A means of initializing information that should be accessible from
      every meta-generated class.
    params:
      var cli : any = null #:
        A metax.cli.Values instance obtained from instantiating a command line.
        IMPORTANT: We are not specifying the type (metax.cli.Values) here
        because it would introduce a circularity to depend on metax.cli.Values.
      var resources : map<@str,@str> = null #:
        An explicit mapping for resources.
    scope<cc>:
      if (cli != nullptr) {
        Object::CLIIs(cli);
      }
      if (resources != nullptr) {
        Object::ResourceMapIs(*resources);
      }
    scope<js>:
      if (cli != null) {
        metax.root.Object.CLIIs(cli);
      }
      if (resources != null) {
        metax.root.Object.ResourceMapIs(resources);
      }
    scope<py>:
      if cli is not None:
        Object.CLIIs(cli)
        logging.info('metax.root.Object.Init: CLI initialized.')
      if resources is not None:
        Object.ResourceMap().update(resources)
        logging.info('metax.root.Object.Init: ResourceMap initialized.')
    test<py>:
      metax.root.Object.Init()
    end method Init;

    static
    method RegisterResource #:
      Add a resource to the resource map.
    params:
      var name : str #:
        Name of the resource
      var path : str #:
        The value associated with the resource.
    scope<cc>:
      Object::ResourceMapRef()[name] = path;
    test<cc>:
      metax::root::Object::RegisterResource('a', '/a/b/c');
    scope<js>:
      metax.root.Object.ResourceMapRef()[name] = path;
    scope<py>:
      Object.ResourceMapRef()[name] = path
    test<py>:
      metax.root.Object.RegisterResource('a', '/a/b/c')
    end;

    static
    method Welford #:
      Incrementally adjust mean and N*variance given a new invocation of a
      method with a certain time.
    params:
      var fqn : str #:
        The method fqn to adjust.
      var ns : int #:
        How many nanoseconds the method took to complete.
    scope:
      data = metax.root.MethodCount.setdefault(fqn, [0, 0, 0])
      n, mean, M2 = data
      n += 1
      delta = ns - mean
      mean += delta / n
      delta2 = ns - mean
      M2 += delta * delta2
      data[0] = n
      data[1] = mean
      data[2] = M2
    test:
      mc = metax.root.MethodCount
      test.iseq({}, mc)
      metax.root.Object.Welford('a.b.c', 10)
      test.iseq({'a.b.c': [1, 10.0, 0.0]}, mc)
      metax.root.Object.Welford('a.b.c', 20)
      test.iseq({'a.b.c': [2, 15.0, 50.0]}, mc)
      metax.root.Object.Welford('a.b.c', 30)
      test.iseq({'a.b.c': [3, 20.0, 200.0]}, mc)
      metax.root.Object.Welford('a.b.c', 40)
      test.iseq({'a.b.c': [4, 25.0, 500.0]}, mc)
    end method Welford;

    meta
    method Resource : str #:
      This method provides an interface by which a user an obtain a
      resource that was defined via the 'resource' construct within
      the 'assocs' attribute of a class.  Having this be a meta method allows
      us to:
       - store the links in class-specific directories without worrying that
         invocation from a subclass will break the naming.
       - allows resources from one class to be accessed from another class
       - will work with non-meta classes (assuming the non-meta BUILD
         files are properly defined).
    params:
      var resource_id : str #:
        The id of the resource (that is, the value of the primary attribute
        of the 'resource' construct that defines the resource. This may be
        a id or an xid.
      var fqn : str = null #:
        The fully qualified name of the class for which resources are
        desired.  If null, and resource_id is not an fqn, uses the receiver
        cls to determine fqn.
      var test : bool = false #:
        If true, the resource is for a test class.
    scope<py>:
      /# TODO(wmh): Each metaclass should maintain the list of legal
      /# resources associated with class instances, so that this method
      /# is just a lookup in a map.  There are, however, some complexities
      /# involved in auto-generating this map that need to be worked out
      /# (code for auto-generation of field constructs needs to be written,
      /# similar to the code for auto-generating methods).  We also need
      /# to decide whether resources get inherited from parent classes, etc.

      /# One problem with this method is that it should really be defined
      /# in metax.c.Compiler, which has all the data and methods to make
      /# a simple determination of the namespace directory. But we do not
      /# want metax.root.Object depending on metax.c.Compiler.
      /#
      /# TODO(wmh): Do we want to provide access to ~/.config/metameta
      /# via a meta or static var on Object? That would give us access to
      /# repository_path without having to rely on METAREP

      /# TODO(wmh): In metax.c.*, there is a moratorium on the use of
      /# baselang I/O methods (everything must go thru Compiler.fs()). But
      /# if we don't apply the same rules here, we will fail to be able to
      /# provide a memory-only filesystem. Figure out how to handle this.
      import os
      if '.' in resource_id:
        if fqn:
          raise Error(
            'Do not specify both fqn (%s) and fully qualified resource_id (%s)'
            % (fqn, resource_id))
        fqn, resource_id = resource_id.rsplit('.', 1)
      elif not fqn:
        fqn = cls.__module__ + '.' + cls.__name__
      namespace_fqn, clsname = fqn.rsplit('.', 1)
      subparts = namespace_fqn.split('.')
      fqrn = fqn + '.' + resource_id

      result = None
      resmap = cls.ResourceMap()
      if resmap:
        result = resmap.get(fqrn, None)
      if result:
        /# We've found an explicit match for the named resource in the
        /# resources mapping, so we use it.
        /# logging.info('Found explicit "%s" for %s', result, fqrn)
        pass
      else:
        /# TODO(wmh): Get this working in bazel!  Need to add to assocs
        /# and define a BUILD target ... in oopl.tgz?
        import metastrap
        version = metastrap.Version
        if version is None:
          /# Note that this is only printed if metax.root.Object.Resource() is
          /# used. Do we need to log the warning, or can we safely silently do
          /# this?
          logging.warning('Implicitly invoking metastrap.Setup()')
          metastrap.Setup()
          version = metastrap.Version

        /# Convert the fqn to a relative path.
        if os.getenv('TEST_SRCDIR', None) or os.getenv('IN_UNITTEST'):
          /# We are in bazel running a test.  All such tests are invoked from
          /# the directory containing WORKSPACE.
          parts = [os.getcwd()] + subparts
        else:
          config = cls.Config()
          if version == 'beta':
            if config:
              metarep = config['repository_path']
            else:
              metarep = os.getenv('METAREP')
              if metarep is None:
                metarep = '/Users/wmh/src/wmh/lib/meta2'
                print('WARNING: Temporarily using hardcoded repopath %s' % metarep)
              else:
                metarep += '2'  # NEWSUFFIX
            parts = [metarep, 'oopl', 'python']
          else:
            parts = [config['src_root'], 'lib', 'versions', version, 'lib']
          parts.extend(subparts)
        /# CODETANGLE(resource_dir): In metax.c (parser.meta).
        parts.append('.__resources')
        /# CODETANGLE(resource_name): In metax.c (parser.meta).
        parts.append('%s_%s' % (clsname, resource_id))
        path = '/'.join(parts)

        /# NOTE: Although I used to return the non-realpath version, allowing
        /# the caller to decide how to proceed, there was never a time where I
        /# wanted the non-realpath version, so I've decided to always convert.
        /# This does introduce an inconsistency though, because paths that do
        /# not exist will stay in non-realpath format.
        /# TODO(wmh): How to avoid using baselang I/O commands here??
        result = os.path.realpath(path)
      return result
    scope<cc>:
      return nullptr;
    scope<js>:
      return null;
    end method Resource;

    lifecycle #:
      Do NOT introduce any instance-level state here.
      DO NOT introduce any meta-level state either.
    scope:
    end lifecycle;

    remark hidden #:
      I am currently disabling the test class for Object because it adds to
      the complexity of bootstrapping javascript. Consider reinstating these.

      raw test field obj : metax.root.Object;

      test
      lifecycle #:
        A test lifecycle that creates an Object instance.
      setup<py>:
        test.obj = metax.root.Object()
      setup<js>:
        test.obj = new metax.root.Object();
      end;

      test method test_generic
      scope<py>:
        print('here with %s' % test.obj)
      scope<js>:
        console.log('here with ' + test.obj);
      end;
    end remark hidden;

  end class Object;

  nometa
  class Error #:
    The exception hierarchy is documented in the following places:
      python: https://docs.python.org/2/library/exceptions.html
      javascript: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error
  parent<py> ^Exception
  parent<js> ^Error
  parent<cc> ^std.runtime_error
  assocs<cc>:
    cls assoc ObjectMetaRoot;
    std assoc exception;
  scope:

    lifecycle #:
      Pass the message.
    params<py>:
      var msg : str = null;
    super<py> (msg)
    scope<py>:
    params<cc>:
      var msg : str = null;
    super<cc> (msg)
    scope<cc>:
    end;

  end class Error;

  nometa
  class InternalError < Error;


end namespace metax.root;
