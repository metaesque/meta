namespace metax.food scope:

  abstract
  class FoodRootConstruct < metax.meta.Construct #:
    All constructs in Meta(Food) inherit from this abstract construct,
    so the Attribute definitions here are available in subconstructs.
    However, note that the existence of an Attribute here does NOT mean it
    is automatically included in the subconstruct ... the subconstruct
    must specify the primary attribute (and any customization of other
    values).
  scope:
    abstract method kind : str;
  end class FoodRootConstruct;

  class DayConstruct < FoodRootConstruct #:
    Construct for grouping meals by day.
  scope:

    method kind : str scope:
      return 'day'
    end method kind;

    override
    method expandMeta params:
      var output : vec<metax.c.Construct> = null #:
        Where to write constructs created during expansion.
    scope:
      for child in self.attrval('scope:'):
        child.expandMeta()
    end method expandMeta;

  end class DayConstruct;

  class MealConstruct < FoodRootConstruct #:
    The core grouping construct, describing a meal consumed.
  scope:

    method kind : str scope:
      return 'meal'
    end method kind;

    override
    method expandMeta params:
      var output : vec<metax.c.Construct> = null #:
        Where to write constructs created during expansion.
    scope:
      for child in self.attrval('scope:'):
        child.expandMeta()
    end method expandMeta;

  end class MealConstruct;

  class FoodConstruct < FoodRootConstruct #:
    The core food construct, describing a single food item consumed.
  scope:

    method kind : str scope:
      return 'food'
    end method kind;

  end class FoodConstruct;

  class ExerciseConstruct < FoodRootConstruct #:
    The core exercise construct, describing a single exercise item consumed.
  scope:

    method kind : str scope:
      return 'exercise'
    end method kind;

  end class ExerciseConstruct;

  abstract
  class BaseLanguageBio < metax.meta.BaseLanguageConstruct #:
    Abstract superclass of all baselangs in Meta(Food).
  scope:

  end class BaseLanguageBio;

  class FoodDummy < BaseLanguageBio #:
    Meta(Bio) does not have any existing baselangs, so we create a dummy.
  scope:

  end class FoodDummy;

end namespace metax.food;
