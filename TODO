--------------------------------------------------------------------------------
IMPORTANT: The code at the top of each Meta-generated namespace is performing
multiple invocations.

  - Within nm/sp.py, I have code of the form:
       try:
         import nm.sp
       except ImportError:
         pass:
       if not getattr(nm, 'sp', None):
         import sys
         nm.sp = sys.modules[__name__]
  - The intention is to allow code within the namespace to refer to classes
    using either A or nm.sp.A.
  - The problem is that the try: import nm.sp is invoking the importation
    code a second time, which means Meta__Initialize methods are invoked
    twice.

--------------------------------------------------------------------------------
Suppose we have:

  test
  class TestCase < metax.test.TestCase scope:
    test method tstpath scope:
      ...
    end method tstpath;
  end class;

The feature attribute 'test' before method 'tstpath' causes the Meta compiler
to fail an assert in ClassConstruct.updateClass() which expects myclass.testclass()
to always be non-null.  Since test classes don't have test classes, this isn't
true for the above.

Solutions:
 1. report the use of 'test' before methods in a test class as illegal
 2. implicitly clear 'test' from such methods
 3. actually support tests of tests.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
