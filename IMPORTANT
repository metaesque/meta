Pressing issues:

 - In oopl/schema.meta, behavior fqnToTarget() validates method 'methname'
   within fqn 'nm.sp.Class.methanme' by looking in the user-class .map file
   in $repo/oopl/python/nm/sp/.Class.py.map. However, when fqn is meant to
   be interpreted as an implicit test method, we should really be checking
   $repo/oopl/python/nm/sp_test/.ClassTest.py.map instead!  This is why
     % metac -rv apis wmh.apis.Repository.registerSource_1
   fails (registerSource_1 is not a method in the user class, but
   test_registerSource_1 *is* a method in the associated test class).

. HOWEVER, when the fqn is meant
   to be interpreted as an implicit test method (the usual case!), we should
   really be looking


 - Python's lookup rules for class variables
   - metax.root.Object.Config is a static field that defines _Config on all
     subclasses.
   - suppose we have a class defined somewhere life:
      class SomeClass scope:
        meta method Config scope:
          return 1
   - Some how, the Config() from object is being used instead of the above,
     wichin SomeClass.


 - The following crashes the parser (note the ':' instead of '#:' on first line)
    method list :
      List the children of the current node
    scope:
      for cid, child in self.children().iteritems():
        print cid
    test:
    end method list;

 - In schema.meta, when relying on a contruct defiend in an abstract
   construct parent, inheritance only works for constructs defined in the
   immediate parent, not in arbitrary ancestors.
